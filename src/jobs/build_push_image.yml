description: >
  (TODO: should be called isopod_build_push, but that would be a breaking change)
  This job builds and pushes Docker image to private Docker hub. It uses isopod for building and pushing.
  Since dependencies can be pulled from Docker HUB, authentication is needed for it as well.

executor:
  name: isopod
  tag: <<parameters.isopod_version>>

parameters:
  path:
    description: 'Path to directory containing isopod.yml file'
    type: string
    default: .
  isopod_config:
    description: 'Name of the isopod config file'
    type: string
    default: 'isopod.yml'
  isopod_version:
    type: string
    default: $ISOPOD_VERSION
  docker_hub_username:
    type: string
    default: $DOCKER_HUB_USERNAME
  docker_hub_password:
    type: string
    default: $DOCKER_HUB_PASSWORD
  gar_username:
    type: string
    default: $DOCKER_GAR_USERNAME
  gar_password:
    type: string
    default: $DOCKER_GAR_PASSWORD
  gar_url:
    type: string
    default: $DOCKER_GAR_REGISTRY_URL
  cache_name:
    type: string
    default: ''
  maven_credentials:
    # NOTE that this is the context variable name, not the context variable itself (i.e. ARTIFACTORY_MAVEN_CREDENTIALS, not ${ARTIFACTORY_MAVEN_CREDENTIALS})
    type: string
    default: 'ARTIFACTORY_MAVEN_CREDENTIALS'
  npm_credentials:
    # NOTE that this is the context variable name, not the context variable itself (i.e. ARTIFACTORY_MAVEN_CREDENTIALS, not ${ARTIFACTORY_MAVEN_CREDENTIALS})
    type: string
    default: 'NPM_RC'
  docker_layer_caching:
    type: boolean
    default: true
  docker_version:
    type: string
    default: ''
  prebuild_steps:
    description: 'Steps that will run before build'
    type: steps
    default: [ ]
  postbuild_steps:
    description: 'Steps that will run after build'
    type: steps
    default: [ ]

steps:
  - checkout
  # only really needed for maven/java, but less painful to just do it than to configure it in each java build config
  - maven_auth:
      maven_credentials: << parameters.maven_credentials >>
  # only really needed for npm/node, but less painful to just do it than to configure it in each node build config
  - npm_auth:
      npm_credentials: << parameters.npm_credentials >>
  - remote_docker:
      docker_version: << parameters.docker_version >>
      docker_layer_caching: << parameters.docker_layer_caching >>
  - login_docker_registry:
      username: <<parameters.docker_hub_username>>
      password: <<parameters.docker_hub_password>>
  - login_docker_registry:
      url: <<parameters.private_hub_url>>
      username: <<parameters.private_hub_username>>
      password: <<parameters.private_hub_password>>
  - login_docker_registry:
      url: <<parameters.gar_url>>
      username: <<parameters.gar_username>>
      password: <<parameters.gar_password>>
  - when:
      condition: <<parameters.cache_name>>
      steps:
        - restore_cache:
            name: restore the dependencies cache
            key: <<parameters.cache_name>>
  - attach_workspace:
      at: .
  - steps: << parameters.prebuild_steps >>
  - build_push:
      work_dir: << parameters.path >>
      config: << parameters.isopod_config >>
  - steps: << parameters.postbuild_steps >>
