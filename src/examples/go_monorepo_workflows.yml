description: |
  Go monorepo example.
  Note: circleci-config typically consists of 2 files in this case (see also go_monorepo_setup.yml)

# Provide a use-case based example for using this orb.
# Everything in the `usage` section will be displayed in the orb registry.
# Comments are not retained.

usage:

  #############################################################################
  # This is what you typically want to have in your .circleci/java_monorepo_workflows.yml
  #############################################################################

  version: 2.1

  orbs:
    compliance: ricardo/compliance-orb@2
    go: circleci/go@1.7.1
    ric-orb: ricardo/ric-orb@5

  #FIXME: isopod version that you want to use
  cfg-isopod-version: &cfg-isopod-version
    isopod_version: 0.31.0

  #FIXME: go executor version to be used (from circleci's go-orb)
  cfg-go-build-test-executor: &cfg-go-build-test-executor
    name: go/default
    tag: '1.17'

  # FIXME: replace suffix/path with your actual app name/path
  cfg-work-dir-worker: &cfg-work-dir-worker './worker'
  # FIXME: replace suffix/path with your actual app name/path
  cfg-work-dir-api: &cfg-work-dir-api './api'

  # name of the job(s) that github status check is looking for
  # NOTE: job name of no-op build jobs must match respective name of apps actual build jobs so that github can stay agnostic!
  # FIXME: replace suffix with your actual app name
  build-test-api: &build-test-api 'build-test-api'
  # FIXME: replace suffix with your actual app name
  build-test-worker: &build-test-worker 'build-test-worker'

  parameters:
    # FIXME: replace suffix with your actual app name
    api:
      type: boolean
      default: false
    # FIXME: replace suffix with your actual app name
    worker:
      type: boolean
      default: false
    common:
      type: boolean
      default: false

  workflows:
    version: 2

    # FIXME: replace infix with your actual app name
    no-code-change-api:
      when:
        and:
          # FIXME: replace suffix with your actual app name
          - not: << pipeline.parameters.api >>
          - not: << pipeline.parameters.common >>
      jobs:
        # github status check typically checks this job
        # the idea is that, depending on whether there were changes to the app or not, github either considers this no-op here or the actual build status (without knowing which)
        - ric-orb/no_op:
            name: *build-test-api

    # FIXME: replace infix with your actual app name
    no-code-change-worker:
      when:
        and:
          # FIXME: replace suffix with your actual app name
          - not: << pipeline.parameters.worker >>
          - not: << pipeline.parameters.common >>
      jobs:
        # github status check typically checks this job
        # the idea is that, depending on whether there were changes to the app or not, github either considers this no-op here or the actual build status (without knowing which)
        - ric-orb/no_op:
            name: *build-test-worker

    ###########################################################################
    # workflow for package 'api'
    #
    # NOTE: this is an example workflow that builds 1 image for DEV and PROD.
    # if your app requires individual images per environment check the "worker"
    # example below.
    ###########################################################################
    # FIXME: replace name with your actual app name
    api:
      when:
        or:
          # FIXME: replace suffix with your actual app name
          - << pipeline.parameters.api >>
          - << pipeline.parameters.common >>
      jobs:
        # github status check typically checks this job
        - ric-orb/go_build_test:
            name: *build-test-api
            context: dev
            executor: *cfg-go-build-test-executor
            work_dir: *cfg-work-dir-api
            # FIXME: customize for your actual shared packages
            additional_tests:
              - run:
                  name: Run additional tests from common package
                  command: make test
                  working_directory: common

        - approve_deploy_dev:
            type: approval
            filters:
              branches:
                ignore:
                  # FIXME: replace value with your actual main/master branch name
                  - master

        - ric-orb/build_push_image:
            name: 'build-push-image'
            context: dev
            path: *cfg-work-dir-api
            <<: *cfg-isopod-version
            requires:
              # FIXME: replace suffix with your actual app name
              - *build-test-api
              # note semantic of 'requires': on master this is ignored
              - approve_deploy_dev

        - compliance/sre_compliance_checks:
            context: dev
            requires:
              - build-push-image

        - ric-orb/deploy_job:
            # FIXME: replace suffix with your actual app name
            name: 'deploy-dev-api'
            context: dev
            work_dir: *cfg-work-dir-api
            <<: *cfg-isopod-version
            env: dev
            requires:
              - build-push-image

        - ric-orb/deploy_job:
            # FIXME: replace suffix with your actual app name
            name: 'deploy-prod-api'
            context: prod
            work_dir: *cfg-work-dir-api
            <<: *cfg-isopod-version
            env: prod
            slack_notify_success: true
            slack_notify_failure: true
            # FIXME: replace value with your actual main/master branch name; 'master' is default and is not needed for the slack webhook configuration to work
            #slack_ok_branches: 'main'
            #slack_fail_branches: 'main'
            filters:
              branches:
                only:
                  # FIXME: replace value with your actual main/master branch name
                  - 'master'
            requires:
              # FIXME: replace suffix with your actual app name
              - deploy-dev-api

    ###########################################################################
    # workflow for package 'worker'
    #
    # NOTE:
    # this is an example workflow that builds 2 separate images for DEV and
    # PROD. if your app does not require individual images per environment,
    # consider checking/following the "api" example above.
    ###########################################################################
    # FIXME: replace name with your actual app name
    worker:
      when:
        or:
          # FIXME: replace suffix with your actual app name
          - << pipeline.parameters.worker >>
          - << pipeline.parameters.common >>
      jobs:
        # github status check typically checks this job
        - ric-orb/go_build_test:
            name: *build-test-worker
            context: dev
            work_dir: *cfg-work-dir-worker
            executor: *cfg-go-build-test-executor
            # FIXME: customize for your actual shared packages
            additional_tests:
              - run:
                  name: Run additional tests from common package
                  command: make test
                  working_directory: common

        - approve_deploy_dev:
            type: approval
            filters:
              branches:
                ignore:
                  # FIXME: replace value with your actual main/master branch name
                  - master

        # jobs to build and deploy DEV image
        - ric-orb/build_push_image:
            name: 'build-push-image-dev'
            context: dev
            path: *cfg-work-dir-worker
            <<: *cfg-isopod-version
            requires:
              # FIXME: replace suffix with your actual app name
              - *build-test-worker
              # note semantic of 'requires': on master this is ignored
              - approve_deploy_dev

        - compliance/sre_compliance_checks:
            context: dev
            requires:
              - build-push-image-dev
              - build-push-image-prod

        - ric-orb/deploy_job:
            # FIXME: replace suffix with your actual app name
            name: 'deploy-dev-worker'
            context: dev
            work_dir: *cfg-work-dir-worker
            <<: *cfg-isopod-version
            env: dev
            requires:
              - build-push-image-dev

        # jobs to build and deploy PROD image
        - ric-orb/build_push_image:
            name: 'build-push-image-prod'
            context: prod
            path: *cfg-work-dir-worker
            <<: *cfg-isopod-version
            filters:
              branches:
                only:
                  # FIXME: replace value with your actual main/master branch name
                  - master
            requires:
              - *build-test-worker

        - ric-orb/deploy_job:
            # FIXME: replace suffix with your actual app name
            name: 'deploy-prod-worker'
            context: prod
            work_dir: *cfg-work-dir-worker
            <<: *cfg-isopod-version
            env: prod
            slack_notify_success: true
            slack_notify_failure: true
            # FIXME: replace value with your actual main/master branch name; 'master' is default and is not needed for the slack webhook configuration to work
            #slack_ok_branches: 'main'
            #slack_fail_branches: 'main'
            filters:
              branches:
                only:
                  # FIXME: replace value with your actual main/master branch name
                  - master
            requires:
              # FIXME: replace suffix with your actual app name
              - deploy-dev-worker
              - build-push-image-prod
